🗃 리눅스의 주요 디렉토리

bin	기본 명령어들이 저장된 디렉토리
boot	부팅에 필요한 가진 파일들이 저장되는 곳
dev	시스템 디바이스 관련 파일들이 저장되는 것
etc	시스템 설정에 관련된 각종 파일들이 저장되는 곳
home	사용자의 홈 디렉토리가 생성되는 곳
lib	커널과 프로그램에 필요한 각종 라이브러리가 저장되는 곳
media	CD, USB같은 외부 장치를 연결하는 곳
mnt	탈부착 가능한 장치들을 임시로 연결하는 곳(WSL의 경우 윈도우의 디렉토리와 연결)
opt	추가 패키지가 설치되는 곳
root	root(최고관리자)계정의 홈 디렉토리
run	실행중인 서비스와 관련된 파일들이 저장되는 곳
sbin	시스템 관리자용 명령어들이 저장되는 곳
sys	리눅스 커널 관련 정보가 있는 곳
tmp	시스템 사용중 발생하는 임시데이터가 저장되는 곳
usr	기본 실행파일, 라이브러리, 헤더 파일등이 저장되는 곳
var	시스템 운영중 발생하는 데이터, 로그가 저장되는 곳
proc	실행중인 프로세스 및 커널 정보가 저장되는 곳디스크상이 아닌 메모리에 존재
 
💻 필수 명령어들 요약

1. ls - 현재 위치의 파일 목록 조회
2. cd - 디렉터리 이동
3. touch - 0바이트 파일 생성, 파일의 날짜와 시간을 수정
4. mkdir - 디렉터리 생성
5. cp - 파일 복사
6. mv - 파일 이동
7. rm - 파일 삭제
8. cat - 파일의 내용을 화면에 출력, 리다이렉션 기호('>')를 사용하여 새로운 파일 생성
9. redirection - 화면의 출력 결과를 파일로 저장
10. alias - 자주 사용하는 명령어들을 별명으로 정의하여 쉽게 사용할 수 있도록 설정
 
⌨️ 리눅스의 중요 명령어들

 
history

로그인한 사용자가 작업했던 command를 확인할 수 있다.
$ history
 
pwd

print working directory (포지션이 워딘가)
현재 위치한 디렉토의 절대경로를 표시합니다.
$ pwd
/home/itholic
 
tail

파일의 뒷부분을 보고싶은 줄 수만큼 보여준다.
옵션을 지정하지 않으면 파일 하위 10줄을 보여준다.
주로 실시간으로 내용이 추가되는 로그파일을 모니터링할때 유용하게 사용한다
$ tail -3 testfile
13
14
15

$ tail testfile
6
7
8
9
10
11
12
13
14
15

$ tail -F testfile
6
7
8
9
10
11
12
13
14
15
(명령어가 종료되지 않고 계속 해당 화면을 출력하며, 파일 내용 변경시 자동으로 갱신해준다)
 
head

파일의 앞부분을 보고싶은 줄 수만큼 보여준다.
옵션을 지정하지 않으면 파일 상위 10줄을 보여준다.
$ head -3 testfile
1
2
3

$ head testfile
1
2
3
4
5
6
7
8
9
10
 
find

find [검색경로] -name [파일명]
특정 파일이나 디렉토리를 검색한다.
주로 특정 확장자명을 찾기 위해 사용한다.
type 옵션을 주면, 디렉토리나 파일만 지정해서 검색할수도 있다.
$ ls
dir1/  dir3/  file1  file3  picture1.jpg  picture3.jpg
dir2/  dir4/  file2  file4  picture2.jpg  picture4.jpg

$ find ./ -name 'file1'
./file1

$ find ./ -name "*.jpg"
./picture1.jpg
./picture2.jpg
./picture3.jpg
./picture4.jpg

🍓 확장자가 .jpg인 파일만 찾아서 바로 삭제할수도 있다. (exec 옵션)
$ find ./ -name "*.jpg" -exec rm {} \\;
$ ls
dir1/  dir2/  dir3/  dir4/  file1  file2  file3  file4

$ find ./ -type d
./
./dir1
./dir2
./dir3
./dir4

$ find ./ -type f
./file1
./file2
./file3
./file4
 
ls

list (라식)
현재 위치한 디렉토리 내 파일/디렉토리 목록을 표시합니다.
옵션 설명
-a	숨긴파일을 포함한 모든 항목 표시
-d	디렉토리 정보만 표시
-F	디렉토리는 /, 실행가능 파일은 *, 소켓파일은 =, 링크인 경우 @를 파일이음 뒤에 표시
-l	각 항목의 상세 정보들을 함께 표시
-m	각 항목들을 쉼표로 구분하여 표시
-r	항목들을 역순으로 표시
-R	하위 디렉토리의 내용들도 표시
-s	kb 단위로 표시
-t	최종 수정시간을 기준으로 표시
-u	최종 액세스 시간 기준으로 표시
$ ls
testfile1  testfile2  testfile3

$ ls -l
total 0
-rw-r--r-- 1 itholic 197121 0 11월  6 22:08 testfile1
-rw-r--r-- 1 itholic 197121 0 11월  6 22:08 testfile2
-rw-r--r-- 1 itholic 197121 0 11월  6 22:08 testfile3

$ ls -a
./  ../  testfile1  testfile2  testfile3

$ ls -al
total 4
drwxr-xr-x 1 itholic 197121 0 11월  6 22:08 ./
drwxr-xr-x 1 itholic 197121 0 11월  6 22:08 ../
-rw-r--r-- 1 itholic 197121 0 11월  6 22:08 testfile1
-rw-r--r-- 1 itholic 197121 0 11월  6 22:08 testfile2
-rw-r--r-- 1 itholic 197121 0 11월  6 22:08 testfile3
 
cd {경로}

🚪 change directory (쑥 들어가기) 뒤에 덧붙여진 경로로 이동하는 명령어에요.
cd [디렉터리 경로] : 이동하려는 디렉터리로 이동 (경로 입력 시 '[', ']'부분은 빼고 입력!)
cd ~ : 홈 디렉터리로 이동
cd / : 최상위 디렉터리로 이동
cd . : 현재 디렉터리
cd .. : 상위 디렉터리로 이동
cd - : 이전 경로로 이동
$ cd /home/itholic/mydir
$ pwd
/home/itholic/mydir

$ cd ..
$ pwd
/home/itholic
 
mkdir (make directory) {디렉토리명}

📂 make directory
디렉토리를 생성합니다.
mkdir dirname : dirname이라는 디렉터리 생성
mkdir dir1 dir2: 한 번에 여러 개의 디렉터리 생성
mkdir -p dirname/sub_dirname : dirname이라는 디렉터리 생성, sub_dirname이라는 하위 디렉터리도 생성
mkdir -m 700 dirname : 특정 퍼미션(권한)을 갖는 디렉터리 생성
$ ls
testfile

$ mkdir testdir
$ ls
testdir/  testfile

🍓 -p 옵션을 주면 하위 디렉토리까지 한 번에 생성 가능
🍓 ls -R 옵션은 디렉토리의 하위목록까지 전부 보여주는 옵션
$ mkdir -p a/b/c/d/e/
$ ls -R a/ 
a/:
b/

a/b:
c/

a/b/c:
d/

a/b/c/d:
e/

a/b/c/d/e:
 
cp {복사할 대상} {붙여넣을 경로 또는 새 파일명}

📑 copy
파일을 복사합니다. 디렉토리를 복사할 시에는 cp 뒤에 -r을 붙여야 해요.
$ ls
testdir/  testfile

$ cp testfile testfile_cp
$ ls
testdir/  testfile  testfile_cp

$ cp -r testdir testdir_cp
$ ls
testdir/  testdir_cp/  testfile  testfile_cp
 
mv {옮길 대상} {대상 디렉토리 또는 새 파일명}

move
파일이나 디렉토리를 옮기거나 이름을 변경할 때 사용합니다.
cp와는 달리 디렉토리를 이동할때도 별다른 옵션이 필요 없다.
$ mv abc.txt /etc/sysconfig/     → abc.txt을 /etc/sysconfig/ 디렉터리로 이동
$ mv aaa bbb ccc ddd            → aaa, bbb, ccc 파일을 /ddd 디렉터리로 이동
$ mv abc.txt www.txt            → abc.txt의 이름을 www.txt로 변경해서 이동
$ ls
testdir/  testfile

$ mv testfile testfile_mv
$ ls
testdir/  testfile_mv

$ mv testfile_mv testdir/
$ ls
testdir/

$ ls testdir/
testfile
 
rm {삭제할 대상}

remove
파일이나 디렉토리를 삭제합니다. 디렉토리를 삭제할 때는 rm 뒤에 -r을 붙여야 하죠.
디렉토리를 삭제할 때에는 하위 디렉토리까지 모두 삭제되므로 유의
$ rm abc.txt       → 해당 파일을 삭제(내부적으로 'rm -i'로 연결됨)
$ rm -i abc.txt    → 삭제 시 정말 삭제할 지 확인하는 메시지를 표시
$ rm -f abc.txt    → 삭제 시 확인하지 않고 바로 삭제(f는 Force의 약자)
$ rm -r abc        → 해당 디렉터리를 삭제(r은 Recursive의 약자)
$ rm -rf abc       → r 옵션과 f 옵션을 합친 것으로 abc 디렉터리와 그 아래에 있는
                      하위 디렉터리를 강제로 전부 삭제(편리하지만 주의해서 사용해야 함)
$ ls
testdir/  testfile1  testfile2

$ rm -f testfile1
$ ls
testdir/  testfile2

$ rm -rf testdir/
$ ls
testfile2
 
sudo {명령어}

최고관리자 권한이 있어야 실행할 수 있는 명령들 앞에 붙여넣어요.
실행시 비밀번호를 요구하기도 하죠.
어떤 명령어 입력시 Permission 관련 오류가 뜬다면 sudo 명령어 필요한거에요.
sudo apt update

sudo rm -r importantFolder
 
cat (concatenate)

단순히 파일의 내용을 출력할 수도 있고,
파일 여러개를 합쳐서 하나의 파일로 만들 수도 있다.
그리고 기존 한 파일의 내용을 다른 파일에 덧붙일수도 있다.
새로운 파일을 만들때에도 사용된다.
$ ls
file1  file2  file3

$ cat file1
1

$ cat file2
2

$ cat file3
3

$ cat file1 file2> file1_2
$ ls
file1  file1_2  file2  file3

$ cat file1_2
1
2

$ cat file1>> file2
$ cat file2
2
1

$ cat> file4
hello
world
(작성이 끝나면 ctrl +d 로 파일 저장)$ cat file4
hello
world
 
touch

파일이나 디렉토리의 최근 업데이트 일자를 현재 시간으로 변경한다.
최근 업데이트 일자는 ls -l 명령을 통해 확인할 수 있다.
파일이나 디렉토리가 존재하지 않으면 빈 파일을 만든다.
touch filename : filename의 파일을 생성
touch -c filename : filename의 시간을 현재시간으로 갱신
touch -t 202110291608 filename : filename의 시간을 날짜 정보(YYYYMMDDhhmm)로 갱신(20211029160 => 2021.10.29.16:08)
touch -r oldfile newfile  : newfile의 날짜 정보를 oldfile의 날짜 정보와 동일하게 변경
$ ls -l
total 0
-rw-r--r-- 1 itholic 197121 0 11월  6 22:08 testfile1

$ touch testfile1
$ ls -l
total 0
-rw-r--r-- 1 itholic 197121 0 11월  6 22:43 testfile1

$ touch testfile2
$ ls -l
total 0
-rw-r--r-- 1 itholic 197121 0 11월  6 22:43 testfile1
-rw-r--r-- 1 itholic 197121 0 11월  6 22:44 testfile2
 
redirection

('>', '>>') : 화면의 출력 결과를 파일로 저장
'>' 기호 : 기존에 있는 파일 내용을 지우고 저장
'>>' 기호 : 기존 파일 내용 뒤에 덧붙여서 저장
'<' 기호 : 파일의 데이터를 명령에 입력
cat file1 firle2 > file3 : file1, file2의 명령 결과를 합쳐서 file3라는 파일에 저장
car file4 >> file3 : file3에 file4의 내용 추가
cat < file1 : file1의 결과 출력
cat < file1 > file2 : file1의 출력 결과를 file2에 저장
 
alias

자주 사용하는 명령어들을 별명으로 정의하여 쉽게 사용할 수 있도록 설정
alias 별명 = '명령어 정의'

🍓 lsa를 실행하면 -a 옵션을 갖는 ls를 실행합니다.
alias lsa = 'ls -a'

🍓 lsa라는 alias를 해제
unalias lsa
 
clear

현재 사용 중인 터미널 화면을 깨끗하게 지웁니다.
$ clear
 
vi {생성할 또는 열어볼 파일명}

📝 vi 에티터 실행해요. 해당 파일명의 파일이 있으면 열고 없으면 새로 생성(:wq로 저장해야 만들어짐)하죠.
 
access_log

웹 사이트에 접속한 사용자에 대한 정보를 볼 수 있습니다.
# tail -f /var/log/httpd/access_log
error_log

웹 사이트에서 사용자가 없는 페이지를 요청했을때 뜨는 에러에 대한 정보를 볼 수 있습니다.
# tail -f /var/log/httpd/error_log
 